定义状态： 我们使用一个二维数组 dp 来表示状态，其中 dp[i][j] 表示前 i 个物品中选取一些放入容量为 j 的背包中所能获得的最大价值。

初始化状态： 我们初始化 dp 数组，将所有的元素都设为 0。

状态转移方程： 考虑第 i 个物品，有两种情况：

如果第 i 个物品的重量大于背包容量 j，则无法放入背包，此时 dp[i][j] 等于 dp[i-1][j]，表示不选取第 i 个物品。
如果第 i 个物品的重量小于等于背包容量 j，则可以选择放入或不放入背包：

如果不放入第 i 个物品，则 dp[i][j] 等于 dp[i-1][j]；

如果放入第 i 个物品，则 dp[i][j] 等于第 i 个物品的价值加上放入前 i-1 个物品时背包容量为 j-w[i] 时的最大价值，
即： dp[i-1][j-w[i]] + v[i]，其中 w[i] 表示第 i 个物品的重量，v[i] 表示第 i 个物品的价值。

综上所述，状态转移方程为：dp[i][j] = max(dp[i-1][j], dp[i-1][j-w[i]] + v[i])。


迭代计算状态： 根据状态转移方程，我们从第一个物品开始迭代计算每个状态的值，直到计算出 dp[n][W]，其中 n 表示物品的数量，W 表示背包的容量。
求解最优解： 最后，dp[n][W] 就是我们要求的结果，表示前 n 个物品中选取一些放入容量为 W 的背包中所能获得的最大价值。
